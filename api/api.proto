syntax = "proto3";

package api;

import "google/api/annotations.proto";

option go_package = ".;api";

enum Unit {
    scalar = 0;
    degree_celsius = 1;
    RPM = 2;
    angle_degree = 3;
    distance_millimeter = 4;
    distance_meter = 5;
}

enum Error{
    missing_packet = 0;
    late = 1;
    empty = 3;
    flood = 4;
}

message ErrorRequest{
    int64 time = 1;
    int32 milliseconds = 2; // time the error is present
    Error type = 3;
}

message Empty {}

message Measurement {
    double Value = 1;
    int64 time = 2;
    Unit unit = 3;
}

message GetHistoryRequest {
    int64 from = 1;
    int64 until = 2;
}

message GetHistoryResponse {
    repeated double Values = 1;
    Unit unit = 2;
}

service Controller {
    rpc UpdateMeasurement(Measurement) returns (Empty) {
        option (google.api.http) = {
            post: "/measurement/update"
            body: "*"
        };
    }

    // in our example the controller will also be the database
    rpc GetHistory(GetHistoryRequest) returns (GetHistoryResponse) {
        option (google.api.http) = {
            get: "/history"
        };
    }

    rpc SetError (ErrorRequest) returns (Empty) {
        option (google.api.http) = {
            post: "/nexterror"
        };
    }
}

message UpdatePositionRequest {
    double position = 1;
}

message UpdatePositionResponse {
    double reached_position = 1;
}

message GetPositionResponse {
    double position = 1;
}

service Actor {
    rpc UpdatePosition(UpdatePositionRequest) returns (UpdatePositionResponse) {
        option (google.api.http) = {
            post: "/position/update"
            body: "*"
        };
    }

    rpc GetPosition(Empty) returns (GetPositionResponse) {
        option (google.api.http) = {
            get: "/position"
        };
    }

    rpc SetError (ErrorRequest) returns (Empty) {
        option (google.api.http) = {
            post: "/nexterror"
        };
    }
}

service Sensor {
    rpc SetError (ErrorRequest) returns (Empty) {
        option (google.api.http) = {
            post: "/nexterror"
        };
    }
}